/**********************************************************
 * This file is generated by the 20-sim C++ Code Generator
 *
 *  file:  LoopController.cpp
 *  subm:  LoopController
 *  model: RELbotSimple
 *  expmt: RELbotSimple
 *  date:  April 10, 2024
 *  time:  9:11:45 AM
 *  user:  Universiteit Twente
 *  from:  -
 *  build: 5.1.0.12836
 **********************************************************/

/* Standard include files */
#include <stdio.h>
#include <math.h>
/* Include the header for memcpy and memset
 * You may need to change this into <memory.h> for older compilers
 */
#include <string.h>

/* 20-sim include files */
#include "LoopController.h"

/* Delta margin used for end time checking */
const XXDouble c_delta = 1.0e-7;

/* this PRIVATE function sets the input variables from the input vector */
void LoopController::CopyInputsToVariables (XXDouble *u)
{
	/* copy the input vector to the input variables */
	m_V[12] = u[0];		/* PosLeft */
	m_V[13] = u[1];		/* PosRight */
	m_V[14] = u[2];		/* SetVelLeft */
	m_V[15] = u[3];		/* SetVelRight */

}

/* this PRIVATE function uses the output variables to fill the output vector */
void LoopController::CopyVariablesToOutputs (XXDouble *y)
{
	/* copy the output variables to the output vector */
	y[0] = 	m_V[10];		/* SteerLeft */
	y[1] = 	m_V[11];		/* SteerRight */

}

LoopController::LoopController(void)
{
	m_number_constants = 0;
	m_number_parameters = 6;
	m_number_initialvalues = 4;
	m_number_variables = 18;
	m_number_states = 4;
	m_number_rates = 4;
	m_number_matrices = 0;
	m_number_unnamed = 0;

	/* the variable arrays */
	m_C = new XXDouble[0 + 1];		/* constants */
	m_P = new XXDouble[6 + 1];		/* parameters */
	m_I = new XXDouble[4 + 1];		/* initial values */
	m_V = new XXDouble[18 + 1];		/* variables */
	m_s = new XXDouble[4 + 1];		/* states */
	m_R = new XXDouble[4 + 1];		/* rates (or new states) */
	m_M = new XXMatrix[0 + 1];		/* matrices */
	m_U = new XXDouble[0 + 1];		/* unnamed */
	m_workarray = new XXDouble[0 + 1];

	Reset(0.0);
	m_finish_time = 10.0;
}

void LoopController::Reset(XXDouble starttime)
{
	m_start_time = starttime;
	m_step_size = 0.01;
	m_time = starttime;
	m_major = true;
	m_stop_run = false;

	/* Clear the allocated variable memory */
	memset(m_C, 0, (0 + 1) * sizeof(XXDouble));
	memset(m_P, 0, (6 + 1) * sizeof(XXDouble));
	memset(m_I, 0, (4 + 1) * sizeof(XXDouble));
	memset(m_V, 0, (18 + 1) * sizeof(XXDouble));
	memset(m_s, 0, (4 + 1) * sizeof(XXDouble));
	memset(m_R, 0, (4 + 1) * sizeof(XXDouble));
	memset(m_M, 0, (0 + 1) * sizeof(XXDouble));
	memset(m_U, 0, (0 + 1) * sizeof(XXDouble));
	memset(m_workarray, 0, (0 + 1) * sizeof(XXDouble));


	state = initialrun;
}

bool LoopController::IsFinished(void)
{
	return (state == finished);
}

LoopController::~LoopController(void)
{
	/* free memory */
	delete[] m_C;
	delete[] m_P;
	delete[] m_I;
	delete[] m_V;
	delete[] m_s;
	delete[] m_R;
	delete[] m_M;
	delete[] m_U;
	delete[] m_workarray;
}

/* the initialization function for submodel */
void LoopController::Initialize (XXDouble *u, XXDouble *y, XXDouble t)
{
	/* initialization phase (allocating memory) */
	m_initialize = true;
	m_stop_run = false;

	/* set the constants */


	/* set the parameters */
	m_P[0] = 644.0;		/* PID_Left\Kp {} */
	m_P[1] = 0.5;		/* PID_Left\Kd {} */
	m_P[2] = 3.9;		/* PID_Left\Ki {} */
	m_P[3] = 644.0;		/* PID_Right\Kp {} */
	m_P[4] = 0.5;		/* PID_Right\Kd {} */
	m_P[5] = 3.9;		/* PID_Right\Ki {} */


	/* set the initial values */
	m_I[0] = 0.0;		/* PID_Left\uI_state_initial */
	m_I[1] = 0.0;		/* PID_Right\uI_state_initial */
	m_I[2] = 0.0;		/* PosSPLeft\initial */
	m_I[3] = 0.0;		/* PosSPRight\initial */


	/* set the states */
	m_s[0] = m_I[0];		/* PID_Left\uI_state */
	m_s[1] = m_I[1];		/* PID_Right\uI_state */
	m_s[2] = m_I[2];		/* PosSPLeft\output */
	m_s[3] = m_I[3];		/* PosSPRight\output */


	/* set the matrices */


	/* (re-)initialize the integration method */
	myintegmethod.Initialize(this);
	
	/* copy the inputs */
	m_time = t;
	CopyInputsToVariables (u);

	/* calculate initial equations */
	CalculateInitial ();

	/* set the states again, they might have changed in the initial calculation */
	m_s[0] = m_I[0];		/* PID_Left\uI_state */
	m_s[1] = m_I[1];		/* PID_Right\uI_state */
	m_s[2] = m_I[2];		/* PosSPLeft\output */
	m_s[3] = m_I[3];		/* PosSPRight\output */


	/* calculate static equations */
	CalculateStatic ();
	/* calculate input equations */
	CalculateInput ();
	/* calculate dynamic equations */
	CalculateDynamic ();
	/* calculate output equations */
	CalculateOutput ();

	/* Set the outputs */
	CopyVariablesToOutputs (y);

	/* end of initialization phase */
	m_initialize = false;

	state = mainrun;
}

/* the function that calculates the submodel */
void LoopController::Calculate (XXDouble *u, XXDouble *y /*, XXDouble t*/)
{
	switch (state)
	{
		case initialrun:	/* calculate the model for the first time */
			Initialize(u, y, 0.0);
			break;
		case mainrun:	/* calculate the model */
			if ( ( m_time <= (m_finish_time - m_step_size  + c_delta )) || ( m_finish_time == 0.0 ) )
			{
				/* another precessor submodel could determine the parameters of this submodel
				   and therefore the static parameter calculations need to be performed. */
				CalculateStatic ();
				CopyInputsToVariables (u);
				CalculateInput ();
				myintegmethod.Step();
				CalculateOutput ();
				CopyVariablesToOutputs (y);
			}
			else
			{
				state = finished;
			}

			if ( ( m_stop_run == true ) || (( m_finish_time != 0.0 ) && ( m_time + c_delta >= m_finish_time)) )
			{
				state = finished;
			}
			break;
		case finished:
			break;
		default:
			break;
	}
}

/* the termination function for submodel */
void LoopController::Terminate (XXDouble *u, XXDouble *y /*, XXDouble t */)
{
	/* copy the inputs */
	CopyInputsToVariables (u);

	/* calculate the final model equations */
	CalculateFinal ();

	/* set the outputs */
	CopyVariablesToOutputs (y);
}


/* This function calculates the initial equations of the model.
 * These equations are calculated before anything else
 */
void LoopController::CalculateInitial (void)
{

}

/* This function calculates the static equations of the model.
 * These equations are only dependent from parameters and constants
 */
void LoopController::CalculateStatic (void)
{

}

/* This function calculates the input equations of the model.
 * These equations are dynamic equations that must not change
 * in calls from the integration method (like random and delay).
 */
void LoopController::CalculateInput (void)
{

}

/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void LoopController::CalculateDynamic (void)
{
	/* PID_Left\uI = PID_Left\Ki * PID_Left\uI_state; */
	m_V[3] = m_P[2] * m_s[0];

	/* PID_Right\uI = PID_Right\Ki * PID_Right\uI_state; */
	m_V[7] = m_P[5] * m_s[1];

	/* PlusMinus1\minus1 = PosLeft; */
	m_V[9] = m_V[12];

	/* PlusMinus\minus1 = PosRight; */
	m_V[8] = m_V[13];

	/* PosSPLeft\input = SetVelLeft; */
	m_R[2] = m_V[14];

	/* PosSPRight\input = SetVelRight; */
	m_R[3] = m_V[15];

	/* PID_Left\error_dot_in = PosSPLeft\input - 1.0; */
	m_V[16] = m_R[2] - 1.0;

	/* PID_Right\error_dot_in = PosSPRight\input - 1.0; */
	m_V[17] = m_R[3] - 1.0;

	/* PID_Right\uI_state_dot = PosSPRight\output - PlusMinus\minus1; */
	m_R[1] = m_s[3] - m_V[8];

	/* PID_Left\uI_state_dot = PosSPLeft\output - PlusMinus1\minus1; */
	m_R[0] = m_s[2] - m_V[9];

	/* PID_Left\uD = PID_Left\Kd * PID_Left\error_dot_in; */
	m_V[2] = m_P[1] * m_V[16];

	/* PID_Right\uD = PID_Right\Kd * PID_Right\error_dot_in; */
	m_V[6] = m_P[4] * m_V[17];

	/* PID_Left\uP = PID_Left\Kp * PID_Left\uI_state_dot; */
	m_V[1] = m_P[0] * m_R[0];

	/* PID_Left\steering = (PID_Left\uP + PID_Left\uD) + PID_Left\uI; */
	m_V[0] = (m_V[1] + m_V[2]) + m_V[3];

	/* PID_Right\uP = PID_Right\Kp * PID_Right\uI_state_dot; */
	m_V[5] = m_P[3] * m_R[1];

	/* PID_Right\steering = (PID_Right\uP + PID_Right\uD) + PID_Right\uI; */
	m_V[4] = (m_V[5] + m_V[6]) + m_V[7];

}

/* This function calculates the output equations of the model.
 * These equations are not needed for calculation of the rates
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void LoopController::CalculateOutput (void)
{
	/* SteerLeft = PID_Left\steering; */
	m_V[10] = m_V[0];

	/* SteerRight = PID_Right\steering; */
	m_V[11] = m_V[4];

}

/* This function calculates the final equations of the model.
 * These equations are calculated after all the calculations
 * are performed
 */
void LoopController::CalculateFinal (void)
{

}



bool LoopController::SetFinishTime(XXDouble newtime)
{
	if ((newtime <= 0.0) || ( newtime > m_time))
	{
		m_finish_time = newtime;
		return true;
	}

	return false;
}

